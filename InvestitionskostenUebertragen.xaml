<Activity mc:Ignorable="sap sap2010" x:Class="InvestitionskostenUebertragen" mva:VisualBasic.Settings="{x:Null}" sap:VirtualizedContainerService.HintSize="1053.6,1200.8" sap2010:WorkflowViewState.IdRef="InvestitionskostenUebertragen_1" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="29">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
      <x:String>UiPath.UIAutomationNext.Enums</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>Microsoft.Activities.Extensions.Statements</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="56">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext</AssemblyReference>
      <AssemblyReference>Microsoft.Activities.Extensions</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Runtime.WindowsRuntime</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="Investitionskosten übertragen" sap:VirtualizedContainerService.HintSize="528.8,1136" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="strText" />
      <Variable x:TypeArguments="x:Int32" Default="3" Name="intExcelRow" />
      <Variable x:TypeArguments="x:Boolean" Default="False" Name="boolReady" />
      <Variable x:TypeArguments="s:String[]" Name="colsExcelPdf">
        <Variable.Default>
          <mva:VisualBasicValue x:TypeArguments="s:String[]" ExpressionText="{}{&quot;C,2&quot;, &quot;D,3&quot;, &quot;F,6&quot;}" />
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="x:Int32" Name="intPdfRow" />
      <Variable x:TypeArguments="x:Int32" Default="10" Name="intPdfRowLast" />
      <Variable x:TypeArguments="x:String" Default="Energieeinsparkonzept" Name="strEnergieText" />
      <Variable x:TypeArguments="x:String" Name="strPdfCol" />
      <Variable x:TypeArguments="x:String" Name="strExcelCol" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:InterruptibleWhile DisplayName="Zeilen durchlaufen" sap:VirtualizedContainerService.HintSize="487.2,1043.2" sap2010:WorkflowViewState.IdRef="InterruptibleWhile_1">
      <ui:InterruptibleWhile.Body>
        <Sequence DisplayName="Zeile verarbeiten" sap:VirtualizedContainerService.HintSize="452,876" sap2010:WorkflowViewState.IdRef="Sequence_25">
          <Sequence.Variables>
            <Variable x:TypeArguments="x:Boolean" Name="boolEnergRow" />
          </Sequence.Variables>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Assign sap:VirtualizedContainerService.HintSize="410.4,60" sap2010:WorkflowViewState.IdRef="Assign_56">
            <Assign.To>
              <OutArgument x:TypeArguments="x:Int32">[intExcelRow]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Int32">[intExcelRow + 1]</InArgument>
            </Assign.Value>
          </Assign>
          <ui:ForEach x:TypeArguments="x:String" CurrentIndex="{x:Null}" DisplayName="Spalten durchlaufen und übertragen" sap:VirtualizedContainerService.HintSize="410.4,683.2" sap2010:WorkflowViewState.IdRef="ForEach`1_3" Values="[colsExcelPdf]">
            <ui:ForEach.Body>
              <ActivityAction x:TypeArguments="x:String">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="x:String" Name="item" />
                </ActivityAction.Argument>
                <Sequence DisplayName="Spalte verarbeiten" sap:VirtualizedContainerService.HintSize="375.2,548.8" sap2010:WorkflowViewState.IdRef="Sequence_24">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Sequence DisplayName="Spalten- und Zeilen-Variablen zuweisen" sap:VirtualizedContainerService.HintSize="333.6,68.8" sap2010:WorkflowViewState.IdRef="Sequence_18">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_41">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[strExcelCol]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[Split(item, ",")(0)]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_42">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[strPdfCol]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">[Split(item, ",")(1)]</InArgument>
                      </Assign.Value>
                    </Assign>
                  </Sequence>
                  <ui:GetFullText IgnoreHidden="{x:Null}" DisplayName="Excel-Zelle in Variable kopieren" sap:VirtualizedContainerService.HintSize="333.6,68.8" sap2010:WorkflowViewState.IdRef="GetFullText_4">
                    <ui:GetFullText.Target>
                      <ui:Target ClippingRegion="{x:Null}" Element="{x:Null}" Id="adc11d58-dd19-4bbe-9675-4e5e58266f1d" Selector="[&quot;&lt;wnd app='excel.exe' cls='XLMAIN' /&gt;&lt;uia automationid='Grid' name='Datenblatt' role='Datenraster' /&gt;&lt;uia automationid='&quot; + strExcelCol + intExcelRow.ToString +&quot;' role='Element' /&gt;&quot;]">
                        <ui:Target.TimeoutMS>
                          <InArgument x:TypeArguments="x:Int32" />
                        </ui:Target.TimeoutMS>
                        <ui:Target.WaitForReady>
                          <InArgument x:TypeArguments="ui:WaitForReady" />
                        </ui:Target.WaitForReady>
                      </ui:Target>
                    </ui:GetFullText.Target>
                    <ui:GetFullText.Text>
                      <OutArgument x:TypeArguments="x:String">[strText]</OutArgument>
                    </ui:GetFullText.Text>
                  </ui:GetFullText>
                  <If Condition="[strExcelCol = &quot;C&quot;]" DisplayName="Wenn erste Spalte (Textspalte)" sap:VirtualizedContainerService.HintSize="333.6,52.8" sap2010:WorkflowViewState.IdRef="If_30">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <If.Then>
                      <Sequence DisplayName="Zeilen hochsetzen u.a." sap:VirtualizedContainerService.HintSize="524.8,610.4" sap2010:WorkflowViewState.IdRef="Sequence_21">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <If Condition="[asc(strText.Substring(0, 1)) = 34]" DisplayName="Fertig-Merker setzen, wenn der Text leer ist (bzw. mit einem Anführungszeichen anfängt)" sap:VirtualizedContainerService.HintSize="483.2,52.8" sap2010:WorkflowViewState.IdRef="If_26">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <If.Then>
                            <Assign DisplayName="Fertig-Merker setzen" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_43">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:Boolean">[boolReady]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                              </Assign.Value>
                            </Assign>
                          </If.Then>
                        </If>
                        <If Condition="[not boolReady]" DisplayName="Wenn nicht fertig" sap:VirtualizedContainerService.HintSize="483.2,424.8" sap2010:WorkflowViewState.IdRef="If_40">
                          <If.Then>
                            <Sequence sap:VirtualizedContainerService.HintSize="304,245.6" sap2010:WorkflowViewState.IdRef="Sequence_28">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <Assign DisplayName="Das letzte Zeichen abschneiden (Zeilenumbruch verhindern)" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_61">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:String">[strText]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:String">[strText.Substring(0, strText.Length - 1)]</InArgument>
                                </Assign.Value>
                              </Assign>
                              <If Condition="[strText = strEnergieText]" DisplayName="Text-Prüfung (Einsparkonzept)" sap:VirtualizedContainerService.HintSize="262.4,52.8" sap2010:WorkflowViewState.IdRef="If_39">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <If.Then>
                                  <Sequence sap:VirtualizedContainerService.HintSize="304,252.8" sap2010:WorkflowViewState.IdRef="Sequence_26">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_62">
                                      <Assign.To>
                                        <OutArgument x:TypeArguments="x:Int32">[intPdfRow]</OutArgument>
                                      </Assign.To>
                                      <Assign.Value>
                                        <InArgument x:TypeArguments="x:Int32">12</InArgument>
                                      </Assign.Value>
                                    </Assign>
                                    <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_63">
                                      <Assign.To>
                                        <OutArgument x:TypeArguments="x:Boolean">[boolEnergRow]</OutArgument>
                                      </Assign.To>
                                      <Assign.Value>
                                        <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                                      </Assign.Value>
                                    </Assign>
                                  </Sequence>
                                </If.Then>
                                <If.Else>
                                  <Sequence DisplayName="Pdf-Zeile hochzählen und auf Plus-Button" sap:VirtualizedContainerService.HintSize="304,538.4" sap2010:WorkflowViewState.IdRef="Sequence_27">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <If Condition="[intPdfRowLast &gt;= 13]" DisplayName="Auf den Plus-Button klicken, wenn nötig" sap:VirtualizedContainerService.HintSize="262.4,52.8" sap2010:WorkflowViewState.IdRef="If_37">
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                      <If.Then>
                                        <ui:Click AlterIfDisabled="{x:Null}" CursorMotionType="{x:Null}" DelayBefore="{x:Null}" DelayMS="{x:Null}" SendWindowMessages="{x:Null}" ClickType="CLICK_SINGLE" DisplayName="Click 'push button'" sap:VirtualizedContainerService.HintSize="333.6,68.8" sap2010:WorkflowViewState.IdRef="Click_7" KeyModifiers="None" MouseButton="BTN_LEFT" SimulateClick="True">
                                          <ui:Click.CursorPosition>
                                            <ui:CursorPosition Position="Center">
                                              <ui:CursorPosition.OffsetX>
                                                <InArgument x:TypeArguments="x:Int32" />
                                              </ui:CursorPosition.OffsetX>
                                              <ui:CursorPosition.OffsetY>
                                                <InArgument x:TypeArguments="x:Int32" />
                                              </ui:CursorPosition.OffsetY>
                                            </ui:CursorPosition>
                                          </ui:Click.CursorPosition>
                                          <ui:Click.Target>
                                            <ui:Target ClippingRegion="{x:Null}" Element="{x:Null}" Id="335f00dd-cac0-4e8f-a76d-d544ee07a93e" Selector="[&quot;&lt;wnd app='acrord32.exe' cls='AcrobatSDIWindow' title='eew_einsparkonzept.pdf (GESCHÜTZT) - Adobe Acrobat Reader DC (32*' /&gt;&lt;wnd aaname='Dokumentbereich' cls='AVL_AVView' title='AVScrolledPageView' /&gt;&lt;wnd cls='AVL_AVView' title='AVPageView' /&gt;&lt;ctrl idx='&quot; + intPdfRowLast.ToString + &quot;' role='row' /&gt;&lt;ctrl name='+ Objekt einfügen' role='push button' /&gt;&quot;]">
                                              <ui:Target.TimeoutMS>
                                                <InArgument x:TypeArguments="x:Int32" />
                                              </ui:Target.TimeoutMS>
                                              <ui:Target.WaitForReady>
                                                <InArgument x:TypeArguments="ui:WaitForReady" />
                                              </ui:Target.WaitForReady>
                                            </ui:Target>
                                          </ui:Click.Target>
                                        </ui:Click>
                                      </If.Then>
                                    </If>
                                    <Assign DisplayName="Assign" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_64">
                                      <Assign.To>
                                        <OutArgument x:TypeArguments="x:Int32">[intPdfRow]</OutArgument>
                                      </Assign.To>
                                      <Assign.Value>
                                        <InArgument x:TypeArguments="x:Int32">[intPdfRowLast + 1]</InArgument>
                                      </Assign.Value>
                                    </Assign>
                                    <If Condition="[intPdfRow = 12]" DisplayName="Pdf-Zeile 12 überspringen" sap:VirtualizedContainerService.HintSize="262.4,52.8" sap2010:WorkflowViewState.IdRef="If_38">
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                      <If.Then>
                                        <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_65">
                                          <Assign.To>
                                            <OutArgument x:TypeArguments="x:Int32">[intPdfRow]</OutArgument>
                                          </Assign.To>
                                          <Assign.Value>
                                            <InArgument x:TypeArguments="x:Int32">13</InArgument>
                                          </Assign.Value>
                                        </Assign>
                                      </If.Then>
                                    </If>
                                    <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_66">
                                      <Assign.To>
                                        <OutArgument x:TypeArguments="x:Int32">[intPdfRowLast]</OutArgument>
                                      </Assign.To>
                                      <Assign.Value>
                                        <InArgument x:TypeArguments="x:Int32">[intPdfRow]</InArgument>
                                      </Assign.Value>
                                    </Assign>
                                    <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_67">
                                      <Assign.To>
                                        <OutArgument x:TypeArguments="x:Boolean">[boolEnergRow]</OutArgument>
                                      </Assign.To>
                                      <Assign.Value>
                                        <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                                      </Assign.Value>
                                    </Assign>
                                  </Sequence>
                                </If.Else>
                              </If>
                            </Sequence>
                          </If.Then>
                        </If>
                      </Sequence>
                    </If.Then>
                  </If>
                  <If Condition="[strExcelCol &lt;&gt; &quot;C&quot;]" DisplayName="Wenn Betrag" sap:VirtualizedContainerService.HintSize="483.2,532" sap2010:WorkflowViewState.IdRef="If_31">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <If.Then>
                      <Sequence DisplayName="Das Eur-Zeichen abschneiden und Punkt entfernen" sap:VirtualizedContainerService.HintSize="304,352.8" sap2010:WorkflowViewState.IdRef="Sequence_22">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <Assign DisplayName="Die letzten Zeichen abschneiden (Zeilenumbruch verhindern)" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_50">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[strText]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">[strText.Substring(0, strText.Length - 3)]</InArgument>
                          </Assign.Value>
                        </Assign>
                        <Assign DisplayName="Die letzten Zeichen abschneiden (Zeilenumbruch verhindern)" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_51">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[strText]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">[strText.Trim]</InArgument>
                          </Assign.Value>
                        </Assign>
                        <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_52">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[strText]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">[strText.Replace(".", "")]</InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </If.Then>
                  </If>
                  <If Condition="[Not boolReady And strText &lt;&gt; strEnergieText And strText.Substring(0, 1) &lt;&gt; Chr(34)]" DisplayName="In Pdf schreiben, wenn nicht fertig" sap:VirtualizedContainerService.HintSize="333.6,52.8" sap2010:WorkflowViewState.IdRef="If_33">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <If.Then>
                      <Sequence DisplayName="In PDF schreiben" sap:VirtualizedContainerService.HintSize="375.2,282.4" sap2010:WorkflowViewState.IdRef="Sequence_23">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <If Condition="[boolEnergRow = True]" DisplayName="Pdf-Spalte minus eins wenn Energieeinspar-Zeile" sap:VirtualizedContainerService.HintSize="333.6,52.8" sap2010:WorkflowViewState.IdRef="If_36">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <If.Then>
                            <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_60">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[strPdfCol]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:String">[(Convert.ToInt32(strPdfCol) - 1).ToString]</InArgument>
                              </Assign.Value>
                            </Assign>
                          </If.Then>
                        </If>
                        <ui:TypeInto AlterIfDisabled="{x:Null}" ClickBeforeTyping="{x:Null}" DelayBefore="{x:Null}" DelayBetweenKeys="{x:Null}" DelayMS="{x:Null}" SendWindowMessages="{x:Null}" SimulateType="{x:Null}" Activate="True" DisplayName="Type Into 'text'" EmptyField="True" sap:VirtualizedContainerService.HintSize="333.6,96.8" sap2010:WorkflowViewState.IdRef="TypeInto_5" Text="[strText]">
                          <ui:TypeInto.Target>
                            <ui:Target ClippingRegion="{x:Null}" Element="{x:Null}" Id="47acf2e5-107d-4e90-858e-8d6393f177a9" Selector="[&quot;&lt;wnd app='acrord32.exe' cls='AcrobatSDIWindow' /&gt;&lt;wnd aaname='Dokumentbereich' cls='AVL_AVView' title='AVScrolledPageView' /&gt;&lt;wnd cls='AVL_AVView' title='AVPageView' /&gt;&lt;ctrl idx='&quot; + intPdfRow.ToString + &quot;' role='row' /&gt;&lt;ctrl idx='&quot; + strPdfCol + &quot;' role='text' /&gt;&quot;]">
                              <ui:Target.TimeoutMS>
                                <InArgument x:TypeArguments="x:Int32" />
                              </ui:Target.TimeoutMS>
                              <ui:Target.WaitForReady>
                                <InArgument x:TypeArguments="ui:WaitForReady" />
                              </ui:Target.WaitForReady>
                            </ui:Target>
                          </ui:TypeInto.Target>
                        </ui:TypeInto>
                      </Sequence>
                    </If.Then>
                  </If>
                </Sequence>
              </ActivityAction>
            </ui:ForEach.Body>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:ForEach>
        </Sequence>
      </ui:InterruptibleWhile.Body>
      <ui:InterruptibleWhile.Condition>
        <mva:VisualBasicValue x:TypeArguments="x:Boolean" ExpressionText="Not boolReady" sap2010:WorkflowViewState.IdRef="VisualBasicValue`1_1" />
      </ui:InterruptibleWhile.Condition>
    </ui:InterruptibleWhile>
  </Sequence>
</Activity>